#!/usr/bin/env python3
"""
A small CLI tool to conveniently edit CSV files.

It supports editing existing rows and appending new rows. It assumes that the first row
is a header row with the names of each column. It is intended for making quick, simple
edits to CSV files more quickly than spreadsheet programs like LibreOffice Writer and
more conveniently than text editors like Vim.

There are many things that it cannot do, including:

    - editing the header row
    - changing the order of rows or columns
    - deleting columns or rows
    - adding new columns

Author:  Ian Fisher (iafisher@protonmail.com)
Version: May 2020
"""
import argparse
import csv
import io
import readline
import sys
from collections import OrderedDict


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("filename")
    parser.add_argument("--edit", action="store_true")
    args = parser.parse_args()

    csv.register_dialect("custom", lineterminator="\n")
    try:
        if args.edit:
            main_edit(args.filename)
        else:
            main_append(args.filename)
    except CancelError:
        print("Operation aborted, file not changed.")
        sys.exit(2)


def main_edit(filename):
    fieldnames, rows = read_rows(filename)

    if not rows:
        print("The file contains no rows.")
        sys.exit(0)

    # TODO(2020-05-22): Allow searching of rows... maybe.
    # TODO(2020-05-22): Print the rows in a nicer format.
    rowno = pick([stringify_row(row.values()).rstrip().rstrip(",") for row in rows])
    old_row = rows[rowno]
    new_row = {}
    for field in fieldnames:
        # TODO(2020-05-22): Display long old values better.
        old_value = old_row[field]
        if not old_value:
            current = "currently blank"
        elif (
            "\r" in old_value
            or "\n" in old_value
            or any(not c.isprintable() for c in old_value)
        ):
            current = f"current: {old_value!r}"
        else:
            current = f"current: {old_value}"

        value = getinput(f"{field} ({current})? ")
        new_row[field] = value if value else old_row[field]

    rows[rowno] = new_row

    # Write to a buffer first, so that the file isn't left in a corrupt state if an
    # exception occurs.
    buffer = io.StringIO()
    writer = csv.DictWriter(buffer, dialect="custom", fieldnames=fieldnames)
    writer.writeheader()
    writer.writerows(rows)

    with open(filename, "w") as f:
        f.write(buffer.getvalue())


def main_append(filename):
    fieldnames, rows = read_rows(filename)

    row = []
    for field in fieldnames:
        sample_values = get_sample_values(field, rows)
        if sample_values:
            sample_values = ", ".join(sample_values)
            prompt = f"{field} (for example: {sample_values})? "
        else:
            prompt = f"{field}? "

        value = getinput(prompt)
        row.append(value)

    with open(filename, "a") as f:
        f.write(stringify_row(row))


def pick(choices):
    for number, choice in enumerate(choices, start=1):
        print(f"({number}) {choice}")

    print()
    while True:
        response = getinput("? ")
        if not response:
            continue

        try:
            index = int(response)
        except ValueError:
            raise ValueError(response)

        if 1 <= index <= len(choices):
            return index - 1


def get_sample_values(field, rows):
    values = [row[field] for row in rows]
    values = [v for v in values if v]
    values = [v for v in values if len(v) < 15]
    values = [v for v in values if "," not in v]
    values = [v for v in values if "\n" not in v and "\r" not in v]
    values = [v for v in values if all(c.isprintable() for c in v)]
    # OrderedDict functioning as an ordered set, to return the last three unique values.
    d = OrderedDict([(v, True) for v in values])
    return list(d.keys())[-3:]


def read_rows(filename):
    with open(filename, newline="") as csvfile:
        reader = csv.DictReader(csvfile, dialect="custom")
        fieldnames = reader.fieldnames
        rows = list(reader)

    return (fieldnames, rows)


def stringify_row(row):
    buffer = io.StringIO()
    writer = csv.writer(buffer, dialect="custom")
    writer.writerow(row)
    return buffer.getvalue()


def getinput(*args, **kwargs):
    try:
        return input(*args, **kwargs).strip()
    except EOFError:
        print()
        return ""
    except KeyboardInterrupt:
        print()
        raise CancelError


class CancelError(Exception):
    pass


if __name__ == "__main__":
    main()
